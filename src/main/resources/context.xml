<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<context:annotation-config />

	<!-- DATABASE SETUP -->

	<bean id="dataConfigPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="searchSystemEnvironment" value="true" />
	</bean>


	<!-- BEGIN PRODUCTION DATABASE SETUP -->
	<bean class="java.net.URI" id="dbUrl">
		<constructor-arg value="${DATABASE_URL}" />
	</bean>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url"
			value="#{'jdbc:postgresql://' + @dbUrl.getHost() + @dbUrl.getPath() }" />
		<property name="username" value="#{@dbUrl.getUserInfo().split(':')[0]}" />
		<property name="password" value="#{@dbUrl.getUserInfo().split(':')[1]}" />
		<property name="maxWait" value="5000" />
		<property name="connectionProperties"
		value="ssl=true;sslfactory=org.postgresql.ssl.NonValidatingFactory"></property>
	</bean>
	<!-- END PRODUCTION DATABASE SETUP -->

	<!-- BEGIN DEV DATABASE SETUP -->
<!-- 	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> -->
<!-- 	<property name="username" value="sa" /> -->
<!-- 	<property name="password" value="" /> -->
<!-- 	<property name="driverClassName" value="org.hsqldb.jdbcDriver" /> -->
<!-- 	<property name="url" value="jdbc:hsqldb:mem:montgomery" /> -->
<!-- 	</bean> -->
	<!-- END DEV DATABASE SETUP -->


	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="montgomeryPU" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>

				<!-- BEGIN PRODUCTION DATABASE SETUP -->
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<!-- END PRODUCTION DATABASE SETUP -->

				<!-- BEGIN DEV DATABASE SETUP -->
				<!-- <prop key="hibernate.dialect">fr.davidsan.montgomery.app.hsql.CustomHsqlDialect</prop> -->
				<!-- END DEV DATABASE SETUP -->

				<prop key="hibernate.show_sql">true</prop>
				<!-- change this to 'verify' before running as a production app -->
				<prop key="hibernate.hbm2ddl.auto">create-drop</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<bean id="newsEntryDao"
		class="fr.davidsan.montgomery.app.dao.newsentry.JpaNewsEntryDao">
	</bean>

	<bean id="userDao" class="fr.davidsan.montgomery.app.dao.user.JpaUserDao">
	</bean>

	<bean id="mailEntryDao"
		class="fr.davidsan.montgomery.app.dao.mailentry.JpaMailEntryDao">
	</bean>

	<bean id="tagDao" class="fr.davidsan.montgomery.app.dao.tag.JpaTagDao">
	</bean>

	<bean id="dataBaseInitializer" class="fr.davidsan.montgomery.app.dao.DataBaseInitializer"
		init-method="initDataBase">
		<constructor-arg ref="userDao" />
		<constructor-arg ref="newsEntryDao" />
		<constructor-arg ref="passwordEncoder" />
		<constructor-arg ref="tagDao" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- INIT REST COMPONENTS -->

	<context:component-scan base-package="fr.davidsan.montgomery.app.rest.resources" />

	<bean id="objectMapper" class="org.codehaus.jackson.map.ObjectMapper" />

	<!-- SPRING SECURITY SETUP -->

	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<constructor-arg value="dhqsJSm7qVEPAym34eRDyAQUfNpXPY4X" />
	</bean>

	<!-- Allow annotation based security for roles -->
	<security:global-method-security
		pre-post-annotations="enabled" />

	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider
			user-service-ref="userDao">
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>

	<security:http realm="Protected API" use-expressions="true"
		auto-config="false" create-session="stateless" entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="authenticationManager">
		<security:custom-filter ref="authenticationTokenProcessingFilter"
			position="FORM_LOGIN_FILTER" />
		<security:intercept-url pattern="/rest/user/authenticate"
			access="permitAll" />
		<security:intercept-url method="GET" pattern="/rest/news/**"
			access="hasRole('user')" />
	</security:http>

	<bean id="unauthorizedEntryPoint" class="fr.davidsan.montgomery.app.rest.UnauthorizedEntryPoint" />

	<bean
		class="fr.davidsan.montgomery.app.rest.AuthenticationTokenProcessingFilter"
		id="authenticationTokenProcessingFilter">
		<constructor-arg ref="userDao" />
	</bean>

</beans>